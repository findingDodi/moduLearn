{
  "id": 5,
  "title": "Klassen und Objekte",
  "chapters": [
    {
      "title": "Klassen",
      "content": "Klassen sind fundamentale Bausteine in der objektorientierten Programmierung (OOP) und dienen als Blaupausen für die Erzeugung von Objekten. Sie umfassen Datenfelder zur Speicherung von Daten und Methoden zur Definition von Operationen, die auf diesen Daten ausgeführt werden können.\n\nEine Klasse definiert den Datentyp eines Objekts und legt fest, welche Attribute das Objekt haben wird und welche Operationen es ausführen kann. Dabei kann eine Klasse als Vorlage oder Bauplan betrachtet werden, während Objekte Instanzen dieser Klasse sind, die tatsächlich im Speicher erzeugt werden.\n\nIn Java wird eine Klasse mit dem Schlüsselwort class und einem Klassennamen definiert. Eine einfache Klasse könnte wie folgt aussehen:\n\njava\npublic class Auto {\n private String marke;\n private int baujahr;\n \n public Auto(String marke, int baujahr) {\n this.marke = marke;\n this.baujahr = baujahr;\n }\n \n public void fahren() {\n System.out.println(\"Das Auto fährt.\");\n }\n \n public void bremsen() {\n System.out.println(\"Das Auto bremst.\");\n }\n}\n\n\nIn diesem Beispiel definiert die Klasse Auto ein Auto-Objekt mit den Attributen marke und baujahr sowie den Methoden fahren() und bremsen(). Diese Methoden definieren die möglichen Operationen, die ein Objekt der Klasse Auto ausführen kann.\n\nKlassen erlauben es, Daten zu kapseln und Funktionalitäten zu abstrahieren, was die Modellierung von realen Entitäten in der Programmierung vereinfacht. Durch Vererbung und Polymorphismus können Klassen auch erweitert und angepasst werden, um spezifische Anforderungen zu erfüllen und Code wiederzuverwenden.\n\nInsgesamt bilden Klassen das Rückgrat der objektorientierten Programmierung in Java und bieten eine strukturierte Möglichkeit, um komplexe Systeme zu entwerfen, zu entwickeln und zu warten.\n\n\n"
    },
    {
      "title": "Objekte",
      "content": "Objekte sind grundlegende Einheiten der objektorientierten Programmierung (OOP), die aus einer Klasse instanziiert werden. Sie repräsentieren konkrete Instanzen von Daten und Funktionalitäten gemäß der Struktur und den Methoden, die in ihrer zugrunde liegenden Klasse definiert sind.\n\nIn Java werden Objekte durch Instanziierung einer Klasse erzeugt. Jedes Objekt hat einen eigenen Satz von Attributen (Datenfelder) und Methoden, die es von anderen Instanzen der gleichen Klasse unterscheiden können.\n\nEin Beispiel für die Erzeugung eines Objekts in Java könnte wie folgt aussehen:\n\njava\npublic class Auto {\n private String marke;\n private int baujahr;\n \n public Auto(String marke, int baujahr) {\n this.marke = marke;\n this.baujahr = baujahr;\n }\n \n public void fahren() {\n System.out.println(\"Das Auto fährt.\");\n }\n \n public void bremsen() {\n System.out.println(\"Das Auto bremst.\");\n }\n}\n\npublic class Main {\n public static void main(String[] args) {\n Auto meinAuto = new Auto(\"BMW\", 2020);\n \n meinAuto.fahren();\n meinAuto.bremsen();\n }\n}\n\n\nIn diesem Beispiel wird ein Objekt meinAuto der Klasse Auto erstellt. Das Objekt hat die Attribute marke und baujahr, die beim Erstellen des Objekts über den Konstruktor initialisiert werden. Anschließend können die Methoden des Objekts aufgerufen werden, um bestimmte Operationen auszuführen.\n\nObjekte erlauben es, Daten und Funktionalitäten zu kapseln und bieten eine flexible Möglichkeit, um auf komplexe Systeme abstrakt zuzugreifen. Durch Vererbung können Objekte auch Eigenschaften und Methoden von übergeordneten Klassen erben und so Code wiederverwenden.\n\nInsgesamt spielen Objekte eine zentrale Rolle in der objektorientierten Programmierung in Java, indem sie eine intuitive Möglichkeit bieten, um reale Entitäten und ihre Interaktionen in Software zu modellieren und zu implementieren.\n\n\n"
    },
    {
      "title": "Klassenmethoden und -variablen",
      "content": "Klassenmethoden und Klassenvariablen sind spezielle Elemente in der objektorientierten Programmierung (OOP), die mit der Klasse selbst verbunden sind, anstatt mit spezifischen Instanzen oder Objekten.\n\nKlassenvariablen:\nKlassenvariablen sind Variablen, die von allen Instanzen einer Klasse gemeinsam genutzt werden. Sie werden mit dem Schlüsselwort static deklariert und sind daher Teil der Klasse selbst, nicht der einzelnen Instanzen. Jede Änderung an einer Klassenvariable betrifft alle Instanzen der Klasse. Ein Beispiel für eine Klassenvariable könnte wie folgt aussehen:\n\njava\npublic class Auto {\n public static int anzahlAutos = 0;\n \n public Auto() {\n anzahlAutos++;\n }\n}\n\n\nIn diesem Beispiel ist anzahlAutos eine Klassenvariable, die zählt, wie viele Instanzen der Klasse Auto erstellt wurden. Diese Variable wird mit static gekennzeichnet, sodass sie von allen Instanzen der Klasse gemeinsam genutzt wird.\n\nKlassenmethoden:\nKlassenmethoden sind Methoden, die auf Klassenebene definiert sind und keinen direkten Zugriff auf spezifische Instanzvariablen haben. Sie werden ebenfalls mit dem Schlüsselwort static deklariert. Klassenmethoden können aufgerufen werden, ohne dass eine Instanz der Klasse erstellt werden muss. Ein Beispiel für eine Klassenmethode könnte so aussehen:\n\njava\npublic class Auto {\n private String marke;\n private int baujahr;\n \n public Auto(String marke, int baujahr) {\n this.marke = marke;\n this.baujahr = baujahr;\n }\n \n public static void info() {\n System.out.println(\"Dies ist eine Klasse für Autos.\");\n }\n}\n\n\nIn diesem Beispiel ist info() eine Klassenmethode, die mit static gekennzeichnet ist und daher direkt von der Klasse Auto aufgerufen werden kann, ohne dass eine Instanz erstellt werden muss.\n\nKlassenmethoden und Klassenvariablen bieten eine strukturierte Möglichkeit, um gemeinsame Funktionalitäten und Daten über alle Instanzen einer Klasse hinweg zu verwalten. Sie sind besonders nützlich für Funktionen oder Informationen, die nicht spezifisch an eine Instanz gebunden sind, sondern die die gesamte Klasse betreffen.\n\nInsgesamt tragen Klassenmethoden und Klassenvariablen zur Flexibilität, Wiederverwendbarkeit und Organisation von Code in der objektorientierten Programmierung bei, insbesondere in Java.\n\n\n"
    }
  ]
}