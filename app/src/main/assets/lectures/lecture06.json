{
  "id": 6,
  "title": "Vererbung",
  "chapters": [
    {
      "title": "Einführung",
      "content": "Vererbung ist ein zentrales Konzept in der objektorientierten Programmierung (OOP), das es ermöglicht, bestehenden Code zu wiederverwenden und die Hierarchie von Klassen zu definieren.\n\nIn Java wird Vererbung durch das Schlüsselwort extends realisiert. Eine Klasse kann von einer anderen Klasse erben, indem sie die gewünschte Klasse erweitert. Die erbende Klasse (Subklasse oder Kindklasse) übernimmt alle Attribute und Methoden der vererbenden Klasse (Superklasse oder Elternklasse) und kann sie nach Bedarf erweitern, ändern oder spezialisieren.\n\nEin einfaches Beispiel für Vererbung in Java könnte wie folgt aussehen:\n\njava\npublic class Fahrzeug {\n private String marke;\n private int baujahr;\n \n public Fahrzeug(String marke, int baujahr) {\n this.marke = marke;\n this.baujahr = baujahr;\n }\n \n public void starten() {\n System.out.println(\"Das Fahrzeug startet.\");\n }\n}\n\npublic class Auto extends Fahrzeug {\n private int anzahlSitze;\n \n public Auto(String marke, int baujahr, int anzahlSitze) {\n super(marke, baujahr);\n this.anzahlSitze = anzahlSitze;\n }\n \n public void hupeDruecken() {\n System.out.println(\"Das Auto hupt.\");\n }\n}\n\n\nIn diesem Beispiel ist Fahrzeug die Superklasse und Auto die Subklasse, die von Fahrzeug erbt. Die Subklasse erbt die Attribute und Methoden der Superklasse und kann zusätzliche Attribute und Methoden hinzufügen.\n\nDie Vererbung ermöglicht es, Code zu organisieren und zu strukturieren, indem gemeinsame Funktionalitäten und Eigenschaften in einer Superklasse definiert werden, die dann von verschiedenen Subklassen spezialisiert werden können. Dies fördert die Wiederverwendbarkeit von Code und erleichtert die Pflege und Erweiterung von Software.\n\nInsgesamt ist die Vererbung ein leistungsfähiges Konzept in der OOP, das in Java und anderen objektorientierten Sprachen verwendet wird, um die Struktur und das Design von Softwarelösungen effizient zu gestalten.\n\n\n"
    },
    {
      "title": "Polymorphismus",
      "content": "Polymorphismus ist ein wichtiges Konzept in der objektorientierten Programmierung (OOP), das die Fähigkeit eines Objekts beschreibt, sich je nach Kontext unterschiedlich zu verhalten.\n\nIn Java wird Polymorphismus durch Vererbung und das Überschreiben von Methoden ermöglicht. Es gibt zwei Arten von Polymorphismus: statischer (Compile-Time) Polymorphismus und dynamischer (Run-Time) Polymorphismus.\n\nStatischer Polymorphismus tritt auf, wenn der Compiler entscheidet, welche Methode zur Compile-Zeit aufgerufen werden soll, basierend auf den Typen der übergebenen Argumente. Ein häufiges Beispiel für statischen Polymorphismus ist die Überladung von Methoden, bei der mehrere Methoden desselben Namens mit unterschiedlichen Parametertypen in einer Klasse definiert werden.\n\njava\npublic class Berechnungen {\n public int addieren(int a, int b) {\n return a + b;\n }\n \n public int addieren(int a, int b, int c) {\n return a + b + c;\n }\n}\n\n\nIm obigen Beispiel wird die Methode addieren zweimal überladen, einmal für die Addition von zwei Integer-Zahlen und einmal für die Addition von drei Integer-Zahlen. Der Compiler wählt die entsprechende Methode basierend auf der Anzahl und den Typen der übergebenen Argumente aus.\n\nDynamischer Polymorphismus tritt auf, wenn der Compiler zur Laufzeit entscheidet, welche Methode aufgerufen werden soll, basierend auf dem Typ des Objekts, auf das zugegriffen wird. Dies wird durch das Überschreiben von Methoden in Subklassen ermöglicht.\n\njava\npublic class Tier {\n public void machenSound() {\n System.out.println(\"Tier macht einen Sound\");\n }\n}\n\npublic class Hund extends Tier {\n @Override\n public void machenSound() {\n System.out.println(\"Wuff!\");\n }\n}\n\n\nIn diesem Beispiel überschreibt die Subklasse Hund die Methode machenSound() der Superklasse Tier, um einen spezifischen Sound für Hunde auszugeben. Durch Polymorphismus kann dann zur Laufzeit entschieden werden, welche machenSound()-Methode aufgerufen wird, je nachdem, ob auf ein Tier-Objekt oder ein Hund-Objekt zugegriffen wird.\n\nPolymorphismus ermöglicht es, Code flexibel zu gestalten, indem eine einheitliche Schnittstelle für verschiedene Implementierungen bereitgestellt wird. Dies fördert die Wiederverwendbarkeit, Erweiterbarkeit und die Aufteilung von Verantwortlichkeiten in der Softwareentwicklung.\n\nInsgesamt ist Polymorphismus ein leistungsfähiges Konzept in der objektorientierten Programmierung, das in Java und anderen OOP-Sprachen verwendet wird, um die Flexibilität und die organisatorischen Vorteile von Klassen und Methoden zu maximieren.\n\n\n"
    }
  ]
}