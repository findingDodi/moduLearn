{
  "id": 1,
  "title": "Grundlagen der Programmierung",
  "chapters": [
    {
      "title": "Programmier-\nsprachen",
      "content": "Programmiersprachen gibt es erst seit es programmierbare Computer gibt. Also seit den 1960er Jahren. \n\nMan kann Programmiersprachen in verschiedene Konzepte einteilen. \nprozedural, imperativ \nDer Code beschreibt genau, was getan werden soll. \n\ndeklarativ \nDer Code beschreibt, WAS das Ergebnis sein soll. Er sagt aber nicht, WIE es zustande kommt \n\nfunktional \nEs werden keine Variablen mit veränderlichen Werten gespeichert. Alle Werte sind Ergebnisse einer Funktion \n\nobjektorientiert \nDaten und Funktionalität werden zu Objekten verbunden - ihre Eigenschaften werden in Klassen beschrieben \n\nDie meisten Programmiersprachen stammen voneinander ab. Das ist für Sie und alle Programmier*innen günstig. Es gibt nur wenige unterschiedliche Konzepte. Die Syntax (d.h. die Schreibweise) für gleiche Ausdrücke ist (meistens) eher ähnlich. Einmal verstandene Konzepte können gut übertragen werden. \n\nSyntax \n ist die Form und die Regeln einer Sprache, wie zum Beispiel reservierte Worte besondere Zeichen und die Regeln der Zusammensetzung, sprich wie dürfen die Namen aufgebaut sein \n\nSemantik \nist Inhalt, Sinn und Bedeutung einer Sprache. \n\nJava in OOP1 und OOP2 \nIn diesem Modul lernen Sie die Konzepte der Programmierung, Codierung und Umsetzung. \n\nJava ist die am besten geeignete Sprache, um OO-Konzepte beim Lernen umzusetzen. Alle OO-Konzepte lassen sich gut lesbar im Code wiederfinden. Es passiert genau das, was Sie im Code schreiben und sehr wenig auotmagically. Sie haben immer die Kontrolle und wissen immer warum es läuft - oder eben nicht. Fehler lassen sich so schnell und einfach identifizieren und lösen.\n\n\n"
    },
    {
      "title": "Software-Entwicklungs-Prozess",
      "content": "Im Detail wird der Prozess der Software-Entwicklung im 3.Semester im Modul Software-Engineering behandelt. In OOP ist es wichtig zu wissen, in welchem Kontext die \nArbeit von Entwickler*innen abläuft. Daher betrachten wir allgemein, wie dieser Prozess ablaufen kann, bzw. ablaufen sollte. Der Prozess sollte in jedem Fall geplant und strukturiert ablaufen. \n\nSoftware wird professionell systematisch und nach einem Vorgehensmodell entwickelt. Das Vorgehensmodell beschreibt ganz allgemein \nWAS getan werden soll \nWANN es getan werden soll \nWELCHES Ergebnis dabei herauskommen soll \nWER das tun soll \n\nJedes Vorgehensmodell gliedert die Aktivitäten in mehrere\nPhasen. In der Abfolge dieser Phasen unterscheiden sich dann die Vorgehensmodelle. \n\nWasserfallmodell \nDas strukturell (und juristisch) einfachste Vorgehensmodell\nist das Wasserfallmodell. Für einfache und auch für komplizierte Projekte wird es (immer noch) eingesetzt. Es enthält alle Phasen, die auch in anderen, agilen, inkrementellen, iterativen, etc. Modellen vorkommen. Alle diese Arbeiten müssen ausgeführt werden. \n\nAnalyse \nSpezifikation, WAS soll gemacht werden \n\nDesign \nArchitektur, WIE SOLL es gemacht werden \n\nImplementierung \nCode, so IST es gemacht werden \n\nTest \nPrüfung: IST das es das SOLL-Ergebnis \n\nBetrieb, Wartung \nLog, Verbesserungen, Fehler \n\nWie man sieht ist das Programmieren, das heißt der Weg vom Problem zum Programm, mehr als nur Codieren. \n\nIn OOP1 befassen wir uns im Wesentlichen mit den Konzepten der Umsetzung (Phase Design) und mit der Umsetzung in Java (Phase Implementierung).\n\n\n"
    },
    {
      "title": "Edit-Compile-Run",
      "content": "Nachdem wir uns oben mit den Schritten bei der Entwicklung von Software 'im Großen' befasst haben sehen wir uns nun an, mit welchen Schritten Software 'im Kleinen' entsteht. \n\n 1. Der Code wird als Text mit einem Editor geschrieben. \n\n 2. Der Quellcode wird in eine Form übersetzt, die die Computer-Hardware auch ausführen kann. Das macht der Compiler. \n\n3. Der Opcode kann ausgeführt werden. Für die Ausführung gibt es zwei Möglichkeiten \n- die Hardware führt den Opcode direkt aus \n-ein weiteres Programm führt den Opcode aus. So ein Programm nennt sich Virtuelle Maschine. \n\nEine VM klingt zunächst umständlich hat aber einige Vorteile. \n -Der Bytecode läuft auf jedem Rechner der die VM installiert hat. Java-ByteCode wird zum Beispiel von der Java Virtual Machine (JVM ausgeführt). \n-Der Bytecode kann von der VM auf Integrität gegen Manipulation geprüft werden. \n- Der Bytecode kann zur Laufzeit in Hardware-Maschinencode übersetzt werden (Just In Time) \n\nDiese Art der Ausführung mittels einer VM wird sehr ähnlich auch in Web-Technologien verwendet.\n\n\n"
    },
    {
      "title": "Einfaches Modell der Hardware",
      "content": "Um es nach Art der Sendung mit der Maus auszudrücken:\nDas Grundelement Machen steht für\n- es wird etwas getan\n- die Software 'läuft'.\n\nDas Grundelement Sachen steht für\n- es gibt Daten, Werte\n- die von der Software bearbeitet werden\n\nDas ist eine sehr vereinfachende Darstellung.\nAber sie zeigt die grundlegene Aufteilung von Software. Das hilft Ihnen, sich eine Vorstellung davon zu machen, was eigentlich ein Programm ist, was es tut und womit.\n\nWir werden in diesem Semester die Bestandteile von Software im Detail kennenlernen, und wie man sie entwickelt. Wir werden dabei aber immer wieder auf diese beiden Grundbestandteile eines Programms zurückkommen.\n\nBeginnen wir nun damit, sie in der Hardware jedes Computers zu identifizieren. \n\nFür das Verständnis von Software ist es sinnvoll, sich mit Hardware zu fassen, da Hardware die Software erst 'zum Leben erweckt'.\nDie Eigenschaften der Hardware-Bestandteile spiegeln sich in den Eigenschaften von Software wieder.\nHardware ist alles, was man anfassen kann.\nDirekt mit der Software hat eine Maus jedoch nicht zu tun.\nFür den Betrieb der Software, das 'Laufenlassen' sind die Hardware-Bestandteile im Innern des Computer-Gehäuses zuständig. \n\nDie Hardware, die etwas macht, ist der 'Prozessor', die 'CPU' (Micro-) Prozessoren gibt es seit ca. 40 Jahren. Sie sind seitdem 5-10.000 mal schneller geworden und sehr viel komplexer. Dabei ist ihr grundlegender Aufbau gleich geblieben. \n\nEbenso ist der Ablauf gleich geblieben, mit dem Software ausgeführt wird:\n- nächsten Befehl holen\n- Befehl auswerten\n- Befehl ausführen. \nDiesen Zyklus durchläuft die CPU ständig.\nSie macht nichts anderes. Aber das rasend schnell. \n\nEin 'Befehl' ist dabei eine Anweisung in Maschinencode. \nDamit die Befehle so schnell abgearbeitet werden können,\nmüssen sie sehr einfach sein:\n- Rechnen mit Zahlenwerten (Addieren, Subtrahieren)\n- Zahlenwerte vergleichen\n- Zahlenwerte lesen und schreiben\nRAM bedeutet 'Random Access Memory', ein Speicher, auf dessen Inhalt man beliebig zugreifen kann.\nHier kommen mit den 'Zahlenwerten' nun die 'Sachen'\nvor, mit denen etwas gemacht wird. \n\nDie Hardware, die diese Sachen beinhaltet, ist der 'Arbeitsspeicher' oder 'RAM'. \nDie Größe ('Kapazität') von RAM ist in den letzten 40 Jahren auf das Millionenfache gestiegen.\nAußer den Sachen stehen im Arbeitsspeicher auch die Befehle im Maschinencode, die die CPU ausführen soll. \n\nDie CPU arbeitet also eng mit dem RAM zusammen. Was die CPU aus dem RAM liest, können sowohl Befehle als auch Daten sein.\nAußerdem können Daten von verschiedener Art sein, z.B. Zahlen oder Texte oder Bilder. Im RAM werden immer nur Binärwerte gespeichert.\n\n\n"
    },
    {
      "title": "Syntax und Semantik",
      "content": "Grammatik und Rechtschreibung zusammen werden als Syntax einer Sprache bezeichnet, die Form ihrer Elemente. \n\nGenau wie natürliche Sprachen wie Deutsch oder Englisch gibt es auch eine Grammatik und eine Rechtschreibung für Programmiersprachen. Beim Schreiben in einer Programmiersprache wie Java ist es noch wichtiger, sich eindeutig auszudrücken, als beim Schreiben in Deutsch. Grund: Der Compiler ist zwar Ihr Freund, ist aber wesentlich einfacher aufgebaut als ein menschlicher Freund. Er versteht daher nur klare, eindeutige Ansagen. Mit jedem neuen Programmier-Konzept lernen Sie auch die dazugehörige Syntax kennen, d.h. die Art und Weise, wie Sie dieses Konzept in Java-Sourcecode umsetzen. \n\n\nDie Semantik eines Ausdrucks ist seine Bedeutung. Ein anderes Wort dafür wären auch Konzept oder Interpretation. \n\nBeispiel \nInterpretation der Bits 01000010 im Speicher als Buchstabe B oder Zahl 66.\n\n\n"
    },
    {
      "title": "Datentypen",
      "content": "Wie wir schon gesehen haben, gibt es im Speicher nur Bits, die 0 oder 1 als Wert haben können, mehr nicht. Damit die CPU immer das Richtige mit den richtigen \"Sachen\" \"macht\" wird, muss vorher klar sein, was denn das \"Richtige\" ist. Genau das wird durch einen Datentyp festgelegt. \n\nEin Datentyp definiert \n- Welcher Wertebereich gespeichert werden kann \n- Welche Operationen auf diesen Werten möglich sind \n\nDer Datentyp eines Speicherbereichs wird im Sourcecode eines Programms angegeben. \n\nPrimitive Datentypen \n\n1, Zahlen \nZahlen sind natürlich einfache, primitive Datentypen. Es gibt in den meisten Programmiersprachen mehrere Datentypen für Zahlen.\nDer Grund liegt in der ökomischen Nutzung des immer begrenzten Speicherplatzes. Kleine Zahlenwerte brauchen wenige Bits, um gespeichert zu werden, größere Zahlenwerte brauchen mehr Bits.\n In Java gibt es daher folgende Zahlen-Datentypen und ihre Wertebereiche. \n\nGanze Zahlen \n- byte \n- short \n- int \n- long \n\nMit ganzen Zahlen kann man zählen und rechnen wie üblich. Das Ergebnis von Rechnungen ist auch immer eine Ganze Zahl, ohne Rest. \n\nFließkomma-Zahlen \n- float \n- double \n\nZeichen und Zeichenketten \n- char \n- string \n\nWahrheitswerte \n- boolean\n\n\n"
    }
  ]
}